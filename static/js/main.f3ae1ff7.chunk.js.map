{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAccountChange","_this$state","activeAccount","refreshedAccounts","state","eth","getAccounts","sent","setState","accounts","alert","inputChangeHandler","event","defineProperty","target","id","value","componentDidMount","_callee2","networkId","bike_deployedNetwork","bikeInstance","insurance_deployedNetwork","insuranceInstance","insuranceAddress","userBalance","bikeUserData","checkInsured","checkInsuredStatus","setDeposit","setPremium","setRatio","_context2","net","getId","BikeSharing","networks","Contract","abi","address","Insurance","options","bikeContract","insuranceContract","getBalance","activeAccountBalance","methods","checkUser","from","then","receipt","inRide","ridesCount","ridesCompleted","goodRidesCount","isInsured","boughtInsurance","viewInsuranceStatus","insuredRides","parseInt","tokensOwned","getBikeValue","depositValue","getPremiumRate","premiumRate","getClaimTokenRatio","ratioClaimToken","error","handleRentBike","_ref3","_callee3","_this$state2","currentBikeId","rentBike","_context3","preventDefault","send","once","on","_x","apply","arguments","handleSurrenderBike","_ref4","_callee4","_this$state3","bikeCondition","applicablePremium","countClaims","surrenderBike","_context4","getReturned","returnedAmount","lastBikeId","_x2","handleUnderwriting","_ref5","_callee5","_this$state4","underwriteInsurance","_context5","_x3","radioHandler","handleIntInput","intInput","validity","valid","defaultIntInput","handleRegularizePayments","_ref6","_callee6","_this$state5","pendingPayments","_context6","getPendingPremia","pendingPremia","regularizePayments","_x4","handleRedeemTokens","_ref7","_callee7","_this$state6","tokensRedeemed","tokenArithmetic","_context7","tokenAccounting","newClaims","newTokenCount","tokenClaimReducer","_x5","storageValue","accountNumber","bikeContractRunning","tokenName","symbol","react_default","createElement","className","onSubmit","htmlFor","type","pattern","onInput","bind","onChange","name","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3ae1ff7.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport BikeSharing from \"./build/contracts/BikeSharing.json\";\nimport Insurance from \"./build/contracts/Insurance.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      storageValue: 0, web3: null, accounts: null,\n      accountNumber: 0,\n      activeAccount: '',\n      activeAccountBalance: 0,\n      defaultIntInput: 0,\n      \n      // Bike\n      bikeContractRunning: true,\n      depositValue: 0,\n      bikeCondition: true, \n      returnedAmount: 0,\n\n      // Bike user\n      inRide: 0,\n      ridesCount: 0,\n      goodRidesCount: 0,\n      currentBikeId:'',\n      lastBikeId: '',\n      ridesCompleted: 0,\n\n      // Insurance\n      boughtInsurance: false,\n      premiumRate : 0,\n      pendingPremia: 0,\n      countClaims: 0,\n      insuredRides: 0,\n      applicablePremium: 0,\n      \n      // Tokens\n      tokenName: 'BehaviourToken',\n      symbol: 'BHT',\n      tokensOwned: 0,\n      tokensRedeemed: 0,\n      ratioClaimToken: 0,\n    };\n  }; \n  /*Function that handles account changes in Metamask*/\n  handleAccountChange = async () => {\n    const {web3, activeAccount} = this.state;\n    const refreshedAccounts = await web3.eth.getAccounts();\n    if (refreshedAccounts[0] !== activeAccount) {\n      this.setState({\n        accounts: refreshedAccounts,\n        activeAccount: refreshedAccounts[0]\n      });\n      alert(\"Main account has changed\");\n    }\n  };\n\n  inputChangeHandler = (event) => {\n    this.setState({[event.target.id]: event.target.value});\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contracts instances.\n      const networkId = await web3.eth.net.getId();\n      const bike_deployedNetwork = BikeSharing.networks[networkId];\n      const bikeInstance = new web3.eth.Contract(\n        BikeSharing.abi,\n        bike_deployedNetwork && bike_deployedNetwork.address,\n      );\n      const insurance_deployedNetwork = Insurance.networks[networkId];\n      const insuranceInstance = new web3.eth.Contract(\n        Insurance.abi,\n        insurance_deployedNetwork && insurance_deployedNetwork.address,\n      );\n      const insuranceAddress = insuranceInstance.options.address;\n\n      // Set state \n      this.setState({\n        web3, \n        accounts,\n        bikeContract: bikeInstance,\n        insuranceContract: insuranceInstance,\n        insuranceAddress: insuranceAddress,\n        activeAccount: accounts[0],\n      });\n\n      // Get my balance\n      const userBalance = await web3.eth.getBalance(this.state.activeAccount);\n      this.setState({\n        activeAccountBalance: userBalance,\n      })\n\n      // Get my history as user\n      const bikeUserData = bikeInstance.methods.checkUser(accounts[0]);\n      await bikeUserData.call({from: accounts[0]})\n      .then((receipt) => {\n        console.log(receipt);\n        this.setState({\n          inRide: receipt[0],\n          ridesCount: receipt[3],\n          ridesCompleted: receipt[3],\n          goodRidesCount: receipt[4]\n        });\n      });\n\n      // Is the user insured ? \n      const checkInsured = insuranceInstance.methods.isInsured(accounts[0]);\n      await checkInsured.call({from: accounts[0]})\n      .then((receipt) => {\n        //console.log(receipt);\n        this.setState({\n          boughtInsurance: receipt\n        })\n      });\n\n      // Check the insured's status\n      const checkInsuredStatus = insuranceInstance.methods.viewInsuranceStatus(accounts[0]);\n      await checkInsuredStatus.call({from: accounts[0]})\n      .then((receipt) => {\n        this.setState({\n          insuredRides: parseInt(receipt[2]),\n          tokensOwned: parseInt(receipt[6]),\n        })\n      })\n\n      // Set constants : Deposit / Premium rate / Claim_Token ratio\n      const setDeposit = bikeInstance.methods.getBikeValue();\n      await setDeposit.call({from: accounts[0]})\n      .then((receipt) => {\n        this.setState({\n          depositValue: receipt\n        });\n      });\n      \n      const setPremium = insuranceInstance.methods.getPremiumRate();\n      await setPremium.call({from: accounts[0]})\n      .then((receipt) => {\n        this.setState({\n          premiumRate: receipt\n        });\n      });\n\n      const setRatio = insuranceInstance.methods.getClaimTokenRatio();\n      await setRatio.call({from: accounts[0]})\n      .then((receipt) => {\n        //console.log(receipt);\n        this.setState({\n          ratioClaimToken: receipt\n        });\n      });\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n// Event for renting the bike\n  handleRentBike = async (event) => {\n    event.preventDefault();\n    await this.handleAccountChange();\n    const {accounts, bikeContract, currentBikeId, depositValue, ridesCount}  = this.state;\n          \n    const rentBike = bikeContract.methods.rentBike(currentBikeId);\n    await rentBike.send({from: accounts[0], value: depositValue})\n    .once('receipt', (receipt) => {\n      //console.log(receipt);\n      this.setState({\n        ridesCount: ridesCount + 1,\n        inRide: 1,\n      })\n    })\n    .on('error', console.error);\n  };\n\n// Event for surrendering the bike\n  handleSurrenderBike = async (event) => {\n    event.preventDefault();\n    await this.handleAccountChange();\n    const {accounts, bikeContract, currentBikeId, bikeCondition, ridesCompleted, boughtInsurance, insuredRides, tokensOwned, applicablePremium, countClaims}  = this.state;\n    \n    const surrenderBike = bikeContract.methods.surrenderBike(currentBikeId, bikeCondition);\n    await surrenderBike.send({from: accounts[0]})\n    .once('receipt', (receipt) => {\n      //console.log(receipt);\n      const getReturned = bikeContract.methods.getReturned(accounts[0]);\n      getReturned.call({from: accounts[0]})\n      .then((receipt) => {\n        console.log(receipt);\n        this.setState({\n          returnedAmount : receipt,\n          lastBikeId: currentBikeId,\n          inRide: 0,\n          ridesCompleted: ridesCompleted + 1,\n          insuredRides: boughtInsurance ? insuredRides + 1 : 0,\n          tokensOwned: bikeCondition && boughtInsurance ? tokensOwned + 1 : tokensOwned,\n          applicablePremium: boughtInsurance ? applicablePremium : 0,\n          countClaims: !bikeCondition && boughtInsurance ? countClaims + 1 : countClaims,\n        });\n      });\n    })\n    .on('error', console.error);\n  };\n\n  handleUnderwriting = async (event) => {\n    event.preventDefault();\n    await this.handleAccountChange();\n    const {accounts, insuranceContract, premiumRate} = this.state;\n    const underwriteInsurance = insuranceContract.methods.underwriteInsurance();\n    await underwriteInsurance.send({from: accounts[0], value: this.state.premiumRate})\n    .once('receipt', (receipt) => {\n      //console.log(receipt);\n      this.setState({\n        boughtInsurance: true,\n      })\n    })\n    .on('error', console.error);\n  };\n\n// Handle radio button calls\n  radioHandler = (event) => {\n    if(event.target.value === \"BadCondition\"){\n      this.setState({\n        bikeCondition: false\n      })\n    }\n    else if(event.target.value === \"GoodCondition\"){\n      const {goodRidesCount} = this.state;\n      this.setState({\n        bikeCondition: true,\n        goodRidesCount: goodRidesCount + 1\n      })      \n    }\n  };\n\n  handleIntInput = (event) => {\n    const intInput = (event.target.validity.valid) ? event.target.value : this.state.defaultIntInput;\n    this.setState({ defaultIntInput: intInput });\n  };\n\n  handleRegularizePayments = async (event) => {\n    event.preventDefault();\n    await this.handleAccountChange();\n    const {accounts, insuranceContract} = this.state;\n\n    const pendingPayments = insuranceContract.methods.getPendingPremia(accounts[0]);\n    await pendingPayments.call({from: accounts[0]})\n    .then((receipt) => {\n      //console.log(receipt);\n      this.setState({\n        pendingPremia: receipt\n      });\n      const regularize = insuranceContract.methods.regularizePayments();\n      regularize.send({from: accounts[0], value: this.state.pendingPremia})\n      .once('receipt', (receipt) => {\n        //console.log(receipt);\n        const getInsuredStatus = insuranceContract.methods.viewInsuranceStatus(accounts[0]);\n        getInsuredStatus.call({from: accounts[0]})\n        .then((receipt) => {\n          this.setState({\n            countClaims: parseInt(receipt[4]),\n            tokensOwned: parseInt(receipt[6])\n          });\n        });\n      })\n      .on('error', console.error);\n    });\n  };\n\n  handleRedeemTokens = async (event) => {\n    event.preventDefault();\n    await this.handleAccountChange();\n    const {accounts, insuranceContract, ratioClaimToken, tokensOwned, tokensRedeemed, countClaims} = this.state;\n\n    if(tokensRedeemed > tokensOwned || tokensRedeemed < ratioClaimToken || countClaims === 0){\n      this.setState({\n        tokensRedeemed: 0\n      });\n    }\n    else {\n      const tokenArithmetic = insuranceContract.methods.tokenAccounting(tokensRedeemed);\n      await tokenArithmetic.call({from: accounts[0]})\n      .then((receipt) => {\n        const newClaims = countClaims - receipt[0];\n        const newTokenCount = tokensOwned - receipt[1];        \n        const claimReducer = insuranceContract.methods.tokenClaimReducer(tokensRedeemed);\n        claimReducer.send({from: accounts[0]})\n        .once('receipt', (receipt) => {\n          //console.log(receipt);\n          this.setState({\n            'countClaims': newClaims,\n            'tokensOwned': newTokenCount,\n          });\n        })\n        .on('error', console.error);\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n\n      <div className=\"App\">\n       \n        <div className=\"py-3\">\n          {/*See current account*/} \n          <p className=\"font-weight-bold\">Current User: {this.state.activeAccount}</p>\n          <p className=\"font-weight-bold\">Currently in ride : {(this.state.inRide === 1) ? 'true' : 'false'}</p>\n        </div>\n\n          {/*Check your balance\n            1) Your account address is x\n            2) Your balance is y\n          */}\n\n          {/* Rent your bike - input : bikeId\n            1) You rented bike number x\n            2) You paid a deposit for the bike\n          */}\n\n          {/* Return your bike - input : bikeId and condition\n            1) You returned bike number x\n            2) Your usage fee was\n            3) You were paid back\n          */}\n\n          {/*First display the bike store, with 2 buttons : rent and return bike*/}    \n      <div>\n        <h2 className=\"font-weight-bold py-2\"> BIKE STORE </h2>          \n          <h4 className=\"font-weight-normal\">Rent Bike</h4> {/*Bike Rental*/}\n\n          <form onSubmit={this.handleRentBike}> {/*In this form, you only need to input the bike ID*/}\n            <div className=\"form-row\"> \n              <div className=\"col\"></div>\n              <div className=\"col-3\">\n                <label htmlFor=\"inputBikeID\" className=\"col-form-label\">Bike ID</label>\n              </div>\n              <div className=\"col-4\">\n                <input \n                  type=\"text\"\n                  pattern=\"[0-9]*\"\n                  className=\"form-control form-control-sm\" \n                  id=\"currentBikeId\"\n                  onInput={this.handleIntInput.bind(this)}\n                  onChange = {this.inputChangeHandler}\n                />\n              </div>\n              <div className=\"col\"></div>\n            </div>\n            <button type=\"submit\">Rent Bike</button>\n          </form>\n          {\n           this.state.ridesCount == 0\n           ? <p>This is your first ride !</p>\n           : <p>You last rented bike no. {this.state.currentBikeId} and paid {this.state.depositValue} wei in deposit </p>\n          }\n          <h4 className=\"font-weight-normal\">Surrender Bike</h4> {/*Bike Surrendering*/}\n          <form onSubmit={this.handleSurrenderBike}>\n            \n            <div className=\"form-row\"> {/*The new condition*/}\n              <div className=\"col\"></div>\n              <div className=\"col-3\">\n                <label htmlFor=\"inputNewCondition\" className=\"col-form-label\">Returned bike condition ?</label>\n              </div>\n              <div className=\"col-4\">\n                <input \n                  type=\"radio\" \n                  className=\"form-control radio\" \n                  name=\"radio-condition\"\n                  value=\"BadCondition\"\n                  onChange={this.radioHandler}\n                />\n                <label className=\"k-radio-label\">Bad condition</label>\n                \n                <input \n                  type=\"radio\" \n                  className=\"form-control radio\" \n                  name=\"radio-condition\"\n                  value=\"GoodCondition\" \n                  onChange={this.radioHandler}\n                />\n                <label className=\"k-radio-label\">Good condition</label>\n              </div>\n              <div className=\"col\"></div>\n            </div>\n            <button type=\"submit\">Return Bike</button>\n          </form>\n          {\n            this.state.ridesCompleted < this.state.ridesCount\n            ? <p>Waiting for the ride to be completed</p>\n            : <p>You returned bike no. {this.state.lastBikeId} in good state : {(this.state.bikeCondition === true) ? 'true' : 'false'}, so you were returned {this.state.returnedAmount} wei</p>\n          }\n\n      </div> {/*Bike store ends*/}\n\n    {/*Then display the insurance corner, with 3 buttons : buy insurance, regularize payments, ask to redeem */}\n      \n      <div> {/*Insurance corner starts*/}\n\n        <h2 className=\"font-weight-bold py-2\"> INSURANCE CORNER </h2>\n          \n          {/* Underwrite your Insurance - how much you paid */}\n\n          <h4 className=\"font-weight-normal\">Underwrite insurance</h4>  {/*Underwrite*/}\n          <div>\n            <button type=\"submit\" onClick={this.handleUnderwriting}>Underwrite</button>\n            {\n              this.state.boughtInsurance\n              ? <p>You underwrote insurance contract with company {this.state.insuranceAddress} and paid {this.state.premiumRate} wei as upfront premium</p>\n              : <p>You have no insurance</p>\n            }\n          </div>\n\n        <h4 className=\"font-weight-normal\">Regularize payments</h4>  {/*Regularize*/}\n\n        <div>\n          <button type=\"submit\" onClick={this.handleRegularizePayments}>Regularize</button>\n          {\n            this.state.boughtInsurance\n            ? <p>You paid {this.state.pendingPremia} wei for {this.state.insuredRides} insured rides, your net claim count is {this.state.countClaims}</p>\n            : <p>You have no insurance</p>\n          }\n        </div>\n\n        {/* Redeem your tokens -\n        1) Historically you earned x tokens in total\n        2) You redeemed y tokens, which decreases your claim count by z\n        3) You now own xx tokens\n        */}\n        \n        <h4 className=\"font-weight-normal\">Redeem Tokens</h4>  {/*Redeem*/}\n        {\n          this.state.boughtInsurance\n          ? <p>You own {this.state.tokensOwned} {this.state.tokenName} ({this.state.symbol})</p>\n          : <p>You have no insurance</p>\n        }        \n        <p>The redemption rate is {this.state.ratioClaimToken}, hence {this.state.ratioClaimToken} is the minimum accepted amount of tokens</p>\n            <form onSubmit={this.handleRedeemTokens}>\n              <div className=\"form-row\"> {/*The bike ID*/}\n                <div className=\"col\"></div>\n                <div className=\"col-3\">\n                  <label htmlFor=\"nbTokens\" className=\"col-form-label\">Tokens to redeem</label>\n                </div>\n                <div className=\"col-4\">\n                  <input \n                    type=\"text\"\n                    pattern=\"[0-9]*\"\n                    className=\"form-control form-control-sm\" \n                    id=\"tokensRedeemed\"\n                    onInput={this.handleIntInput.bind(this)}\n                    onChange={this.inputChangeHandler}\n                  />\n                </div>\n                <div className=\"col\"></div>\n              </div>\n\n              <button type=\"submit\">Redeem Tokens</button>\n            </form>\n            {\n              /*\n              <p>You own {this.state.tokensOwned} {this.state.tokenName} ({this.state.symbol})</p>\n              <p>You redeemed {this.state.tokensRedeemed} tokens</p>\n              <p>You now own {this.state.tokensOwned} tokens</p>\n              <p>Your current claims count is {this.state.countClaims}</p>\n              */\n            }\n\n      </div> \n    </div> \n    );\n  }\n}\n\nexport default App;\n\n\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}